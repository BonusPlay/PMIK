r
c
q
remote localhost 3333
target remote localhost:3333
r
c
c
info funcs
info functions
b /usr/share/openocd/scriptsbmp280_init
b bmp280_init
c
b error
c
b list
b main
c
c
c
c
c
c
q
target remote localhost:3333
c
monitor reset halt
monitor flash erase_address 0x08000000 0x00100000
monitor reset halt
monitor halt
monitor flash protect 0 0 7 off
monitor flash info 0
monitor halt
load
monitor flash info 0
bp list
bl
b main
b bmp_init
b bmp280_init
b configure_spi
r
monitor reset halt
ctx
c
n
s
s
n
exit
q
target remote localhost:3333
monitor reset halt
bl
b bsp280_init
b bmp280_init
c
s
n
n
s
print tmp_state
print HAL_SPI_STATE_READY
print tmp_state == HAL_SPI_STATE_READY
print tmp_mode == SPI_MODE_MASTER
print hspi->Init.Direction == SPI_DIRECTION_2LINES
print (hspi->Init.Direction == SPI_DIRECTION_2LINES)
print HAL_SPI_STATE_READY
print HAL_SPI_STATE_BUSY_RX
print tmp_state == HAL_SPI_STATE_BUSY_RX
print (tmp_state == HAL_SPI_STATE_READY)
print falsee
print false
print 0
print tmp_state
print tmp_mode
print hspi->Init.Direction 
exit
q
b bmp280_init
monitor reset halt
monitor reset halt
target remote localhost:3333
monitor reset halt
bl
c
s
n
s
n
n
s
print (tmp_state == HAL_SPI_STATE_READY)
print (tmp_mode == SPI_MODE_MASTER)
print (tmp_mode == 0x0104)
(hspi->Init.Direction == SPI_DIRECTION_2LINES)
print (hspi->Init.Direction == SPI_DIRECTION_2LINES)
print (hspi->Init.Direction == 0x00000000U)
(tmp_state == HAL_SPI_STATE_BUSY_RX)
print (tmp_state == HAL_SPI_STATE_BUSY_RX)
print ((tmp_state == HAL_SPI_STATE_READY) || ((tmp_mode == 0x0104) && (hspi->Init.Direction == 0x00000000U) && (tmp_state == HAL_SPI_STATE_BUSY_RX))
print ((tmp_state == HAL_SPI_STATE_READY) || ((tmp_mode == 0x0104) && (hspi->Init.Direction == 0x00000000U) && (tmp_state == HAL_SPI_STATE_BUSY_RX)))
tmp_state
print tmp_state
print HAL_SPI_STATE_READY
print *HAL_SPI_STATE_READY
print (int)HAL_SPI_STATE_READY
q
target remote localhost:3333
monitor reset halt
bl
b bmp280_init
b configure_spi
c
n
n
s
s
s
print BmpHandle.spi
print HAL_SPI_STATE_READY
print (int)HAL_SPI_STATE_READY
monitor reset halt
bl
c
n
monitor reset halt
c
n
print BmpHandle.spi
print BmpHandle.spi
s
print hspi->state
n
n
print BmpHandle.spi
s
print hspi->State;
print hspi->State
n
print hspi->State
n
print BmpHandle.spi->State
print BmpHandle.spi->State
print BmpHandle.spi->State
bl
br 2
br
bl
b d 3
b remove 3
b help
help b
help breakpoints
bl
b cl 3
bcl 3
b clear 3
cl 3
bl
b d 3
d 3
bl
d 4
dl
bl
b *configure_spi+150
bl
d 2
monitor reset halt
c
print BmpHandle.spi
print BmpHandle
print BmpHandle.spi->State
s
print hspi
print *hspi
q
target remote localhost:3333
b bmp280_init
c
monitor halt reset
monitor reset halt
c
s
n
*dev
print *dev
print BMP280_REG_ID
b HAL_SPI_RxCpltCallback
b HAL_SPI_TxCpltCallback
monitor reset halt
c
n
n
q
b bmp280_init
monitor restart halt
target remote localhost:3333
monitor restart halt
monitor reset halt
bl
c
s
n
print *dev
monitor reset halt
c
s
n
q
target remote localhost:3333
monitor reset halt
c
c
c
b configure_spi
monitor reset halt
c
n
n
c
q
